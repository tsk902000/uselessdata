// Description:
//   Runs the corresponding user interaction
//
// Dependencies:
//   None
//
// Configuration:
//   None
//
// Commands:
//   hubot (any string)
const appconst = require("./appconstant.js");
const { axiosInstance } = require("./axios_instance");
const { getToken } = require("./utils");
const openai_url = "https://xxxx-sgp.xxxx.com:3900/api/xxxx/completions";
const token = "sk-xxx";
const mcp_server_url = "https://xxxx-sgp.xxxx.com:3085";
const mcp_tools = ["time", "space-jdbc"];
const mcp_openapi = "openapi.json";
async function fetchToolServers() {
  const tool_servers = [];

  // Axios instance for the base server
  const axios = await axiosInstance(mcp_server_url);

  for (const tool of mcp_tools) {
    const url = `${mcp_server_url}/${tool}`;
    const openapi_url = `${tool}/${mcp_openapi}`; // relative to baseURL in axios
    try {
      const res = await axios.get(openapi_url);
      tool_servers.push({
        url,
        openapi: res.data,
      });
    } catch (err) {
      console.error(`Failed to fetch OpenAPI for ${tool}:`, err.message);
    }
  }
  return tool_servers;
}

function resolveRef(ref, openapi) {
  if (!ref.startsWith('#/')) return null;
  const parts = ref.slice(2).split('/');
  let result = openapi;
  for (const part of parts) {
    if (!(part in result)) return null;
    result = result[part];
  }
  return result;
}

function getParameters(details, openapi) {
  const paramProps = {};
  const required = [];

  // 1. Handle parameters array (path, query, header, cookie)
  if (details.parameters) {
    for (const param of details.parameters) {
      const p = param.$ref ? resolveRef(param.$ref, openapi) : param;
      if (!p) continue;
      const schema = p.schema ? (p.schema.$ref ? resolveRef(p.schema.$ref, openapi) : p.schema) : {};
      paramProps[p.name] = { ...schema, description: p.description };
      if (p.required) required.push(p.name);
    }
  }

  // 2. Handle requestBody (for POST, PUT, etc)
  if (
    details.requestBody &&
    details.requestBody.content &&
    details.requestBody.content["application/json"] &&
    details.requestBody.content["application/json"].schema
  ) {
    let bodySchema = details.requestBody.content["application/json"].schema;
    if (bodySchema.$ref) {
      bodySchema = resolveRef(bodySchema.$ref, openapi);
    }
    // If body schema is an object, merge its properties in
    if (bodySchema && bodySchema.type === "object" && bodySchema.properties) {
      for (const [key, prop] of Object.entries(bodySchema.properties)) {
        let resolvedProp = prop;
        if (prop.$ref) resolvedProp = resolveRef(prop.$ref, openapi);
        paramProps[key] = resolvedProp;
      }
      if (Array.isArray(bodySchema.required)) {
        required.push(...bodySchema.required);
      }
    } else if (bodySchema) {
      // For non-object, treat as 'body' property
      paramProps.body = bodySchema;
      required.push('body');
    }
  }

  return {
    type: "object",
    properties: paramProps,
    required: Array.from(new Set(required)),
  };
}

async function createToolDefinitions(toolServers) {
  const tools = [];

  for (const server of toolServers) {
    const openapi = server.openapi;
    const paths = openapi.paths || {};

    for (const [path, methods] of Object.entries(paths)) {
      for (const [method, details] of Object.entries(methods)) {
        if (!details.operationId) continue;

        tools.push({
          type: "function",
          function: {
            name: details.operationId,
            description: details.description || `${method.toUpperCase()} ${path}`,
            parameters: getParameters(details, openapi),
          },
          server_info: {
            url: server.url,
            path,
            method,
          },
        });
      }
    }
  }

  return tools;
}

module.exports = (robot) => {
  return axiosInstance(`${openai_url}`)
    .then((instance) => {
      robot.respond(/(.*)/i, async (res) => {
        const text = res.match[1];
        if (text.toLocaleLowerCase() === "help" || text.startsWith("\\"))
          return;

        try {
          // Fetch tool servers and create tool definitions
          const toolServers = await fetchToolServers();
          const tools = await createToolDefinitions(toolServers);

          robot.logger.debug(
            `Generated ${tools.length} tools from OpenAPI specs`
          );

          // Initialize conversation with user message
          let messages = [{ role: "user", content: text }];

          // Initial request with tools
          const payload = {
            model: "openai/xxxx-code",
            messages: messages,
            tools: tools,
            tool_choice: "auto",
          };

          robot.logger.debug(
            `Sending initial request: ${JSON.stringify(payload)}`
          );

          const headers = {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          };

          const response = await instance.post("", payload, { headers });

          const message = response.data.choices[0].message;
          let toolCalls = [];

          // Handle different formats of tool calls
          if (message.tool_calls && message.tool_calls.length > 0) {
            // Standard format with tool_calls array
            toolCalls = message.tool_calls;
          } else if (message.content && message.content.includes('"name":')) {
            // Sometimes the LLM includes the function call in the content as JSON
            try {
              const match = message.content.match(/\{.*"name".*\}/);
              if (match) {
                const parsedCall = JSON.parse(match[0]);
                var callArgs = parsedCall.arguments;
                if (typeof callArgs !== "string") {
                  callArgs = JSON.stringify(callArgs);
                }

                toolCalls = [
                  {
                    type: "function_call",
                    function: {
                      name: parsedCall.name,
                      arguments: callArgs,
                    },
                    call_id: "call_1",
                  },
                ];
              }
            } catch (e) {
              console.error("Error parsing tool call from content:", e);
            }
          } else if (
            message.function_call ||
            (message.name && message.arguments !== undefined)
          ) {
            // Handle deprecated format or simplified format
            const functionCall = message.function_call || message;
            var funcArgs = functionCall.arguments;
            if (typeof funcArgs !== "string") {
              funcArgs = JSON.stringify(funcArgs);
            }

            toolCalls = [
              {
                type: "function_call",
                function: {
                  name: functionCall.name,
                  arguments: funcArgs,
                },
                call_id: "call_1",
              },
            ];
          }

          // If we have tool calls, process them directly
          if (toolCalls && toolCalls.length > 0) {
            robot.logger.debug(
              "Detected tool calls: " + JSON.stringify(toolCalls)
            );

            // Process each tool call
            var processToolCall = function (toolCall, callback) {
              const functionName = toolCall.function
                ? toolCall.function.name
                : null;
              let args = {};

              try {
                if (toolCall.function && toolCall.function.arguments) {
                  if (typeof toolCall.function.arguments === "string") {
                    args = JSON.parse(toolCall.function.arguments);
                  } else {
                    args = toolCall.function.arguments;
                  }
                }
              } catch (e) {
                robot.logger.error("Error parsing arguments: " + e.message);
              }

              robot.logger.debug(
                "Processing tool call: " +
                  functionName +
                  " with args: " +
                  JSON.stringify(args)
              );

              // Find the matching tool from our OpenAPI specs
              let matchedTool = null;
              for (let i = 0; i < tools.length; i++) {
                if (tools[i].function.name === functionName) {
                  matchedTool = tools[i];
                  break;
                }
              }

              if (!matchedTool) {
                robot.logger.error(
                  "No matching tool found for: " + functionName
                );
                callback({
                  type: "function_call_output",
                  call_id: toolCall.call_id || "call_1",
                  output: JSON.stringify({
                    error: "Tool " + functionName + " not found",
                  }),
                });
                return;
              }

              // Extract API details from the matched tool
              const url = matchedTool.server_info.url;
              const path = matchedTool.server_info.path;
              const method = matchedTool.server_info.method;

              robot.logger.debug(
                "Making " + method + " request to " + url + path
              );

              // Create axios instance for this API call
              axiosInstance(url)
                .then(function (axios) {
                  // Make the API call
                  var apiPromise;

                  if (method.toLowerCase() === "get") {
                    var queryParams = new URLSearchParams();
                    for (var key in args) {
                      queryParams.append(key, args[key]);
                    }
                    var queryString = queryParams.toString();
                    apiPromise = axios.get(path + "?" + queryString);
                  } else {
                    // For POST, PUT, etc.
                    apiPromise = axios[method.toLowerCase()](path, args);
                  }

                  apiPromise
                    .then(function (response) {
                      robot.logger.debug(
                        "API response: " + JSON.stringify(response.data)
                      );

                      callback({
                        result: response.data,
                        error: null,
                      });
                    })
                    .catch(function (error) {
                      robot.logger.error("API call error: " + error.message);
                      var details = "No additional details available";
                      if (error.response && error.response.data) {
                        details = error.response.data;
                      }

                      callback({
                        result: null,
                        error: error.message,
                        details: details,
                      });
                    });
                })
                .catch(function (error) {
                  robot.logger.error(
                    "Failed to create axios instance: " + error.message
                  );
                  callback({
                    result: null,
                    error: "Failed to create API client: " + error.message,
                  });
                });
            };

            // Process the first tool call (since we're focusing on the first one)
            processToolCall(toolCalls[0], function (result) {
              // Create a simplified message array with just the user question and the API result
              var apiResult = result.result;

              if (result.error) {
                apiResult = {
                  error: result.error,
                  details: result.details || "No details available",
                };
              }

              var simplifiedMessages = [
                { role: "user", content: text },
                { role: "assistant", content: JSON.stringify(apiResult) },
              ];

              // Send follow-up request with the simplified messages
              var followupPayload = {
                model: "openai/xxxx-code",
                messages: simplifiedMessages,
              };

              robot.logger.debug(
                "Sending followup request: " + JSON.stringify(followupPayload)
              );

              instance
                .post("", followupPayload, { headers: headers })
                .then(function (followupResponse) {
                  // Send final response to user
                  var finalAnswer =
                    followupResponse.data.choices[0].message.content.trim();
                  res.reply(finalAnswer);
                })
                .catch(function (error) {
                  res.reply("Error in follow-up request: " + error.message);
                });
            });
          } else {
            // No tool calls detected, just return the regular response
            robot.logger.debug("No tool calls detected in response");
            var answer = message.content
              ? message.content.trim()
              : "I didn't get a proper response.";
            res.reply(answer);
          }
        } catch (err) {
          res.reply(
            "LLM API Error: " +
              ((err.response &&
                err.response.data &&
                err.response.data.error &&
                err.response.data.error.message) ||
                err.message)
          );
        }
      });
    })
    .catch((err) => console.log("error", err));
};
